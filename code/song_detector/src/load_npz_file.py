import numpy as npimport matplotlib.pyplot as pltdef plot_spectrogram_with_song_highlight(npz_path: str):    """    Load a .npz file containing:      - 's': spectrogram amplitude (shape: [n_freqs, n_times])      - 'f': optional frequency bins      - 't': optional time bins      - 'songs': binary mask (0/1) for song presence per time bin    and plot the spectrogram with yellow highlighted song segments,    using the 'binary' colormap.    """    # Load data    with np.load(npz_path, allow_pickle=True) as data:        s = data['s']        f = data['f'] if 'f' in data.files else np.arange(s.shape[0])        t = data['t'] if 't' in data.files else np.arange(s.shape[1])        songs = data['song'].astype(bool)    # Detect contiguous song intervals    padded = np.concatenate(([False], songs, [False]))    diff = np.diff(padded.astype(int))    starts = np.where(diff == 1)[0]    ends   = np.where(diff == -1)[0]    # Plot spectrogram with 'binary' colormap    plt.figure(figsize=(10, 4))    mesh = plt.pcolormesh(t, f, s, shading='auto', cmap='binary')    plt.ylabel('Frequency [Hz]')    plt.xlabel('Time [sec]')    plt.title('Spectrogram with Song Highlights')    cbar = plt.colorbar(mesh)    cbar.set_label('Amplitude (dB)' if s.dtype.kind == 'f' else 'Power')    # Overlay song segments    for start, end in zip(starts, ends):        plt.axvspan(t[start], t[end-1], color='yellow', alpha=0.1)    plt.tight_layout()    plt.show()# Example usage:#npz_path = "/Users/mirandahulsey-vincent/Documents/allPythonCode/BYOD_class/data_inputs/sample_GV_groundtruth_npzs/llb3_0439_2018_04_25_05_59_56_segment_0.npz"#plot_spectrogram_with_song_highlight(npz_path)