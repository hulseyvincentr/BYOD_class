import numpy as npfrom pathlib import Pathfrom scipy.io import wavfilefrom scipy.signal import spectrogram, windows, ellip, filtfiltdef generate_spectrogram_from_wav(    wav_path: str | Path,    low_cut: float = 500,    high_cut: float = 8000,    segment_duration: float = 10.0,) -> dict:    """    Generate a filtered spectrogram from a single .wav file.    Returns a dict with keys:        - 's': spectrogram amplitude (normalized)        - 'f': frequency bins        - 't': time bins    """    wav_path = Path(wav_path)    sr, data = wavfile.read(wav_path)        if data.ndim > 1:        data = data.mean(axis=1)    if np.issubdtype(data.dtype, np.integer):        data = data.astype(np.float32)    # Apply bandpass filter    nyq = sr / 2    b, a = ellip(5, 0.2, 40, [low_cut / nyq, high_cut / nyq], btype="band")    data = filtfilt(b, a, data)    # Generate spectrogram    f, t, Sxx = spectrogram(        data,        fs=sr,        window=windows.gaussian(2048, std=2048/8),        nperseg=2048,        noverlap=2048 - 119,    )    # Log-scale and normalize    S_log = 10 * np.log10(Sxx + np.finfo(float).eps)    S_log = np.clip(S_log, a_min=3, a_max=None)    range_val = np.ptp(S_log)    S_norm = (S_log - S_log.min()) / (range_val if range_val != 0 else 1.0)    S_norm **= 0.7  # perceptual scaling    return {        "spectrogram": S_norm,        "frequencies": f,        "times":       t,    }# Example usage:# result = generate_spectrogram_from_wav("example.wav")# s, f, t = result['s'], result['f'], result['t']#Check the results using this to plot:import matplotlib.pyplot as pltdef plot_spectrogram_output(s: np.ndarray, f: np.ndarray, t: np.ndarray):    """    Plot a spectrogram from arrays s (amplitude), f (frequencies), and t (times).    """    plt.figure(figsize=(10, 4))    mesh = plt.pcolormesh(t, f, s, shading='auto', cmap='binary')    plt.ylabel("Frequency [Hz]")    plt.xlabel("Time [sec]")    plt.title("Spectrogram")    plt.ylim(0, 7000)    cbar = plt.colorbar(mesh)    cbar.set_label("Normalized Amplitude")    plt.tight_layout()    plt.show()   #plot_spectrogram_output(result['spectrogram'], result['frequencies'], result['times'])